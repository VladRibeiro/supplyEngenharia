Testes Unitários.

O que são? 
São Rotinas que testam pequenas responsabilidades de uma aplicação e ou sistema em suas diferentes respostas e comportamentos.

Por que usar?
Objetivo é identificar exatamente como aquela parte do sistema irá se comportar com parâmetros esperados ou paramêtros não esperados. A responsabildiade do teste unitário é de garantir a unidade (menor elemento), para o nosso cenários o tipo de teste está direcionado para métodos e funções, logo quaisquer dependências devem ser mockados.

Como usar?
Durante a fase de desenvolvimento em cada método criado e ou alterado em uma classe, variando e removendo parâmetros durante o teste. Deve-se validar comportamentos, exceções e demais fluxos possíveis. Caso ocorra uma alteração no método e o teste unitário não acusou, significa que esse teste está mal implementado.

![Fluxo.01_PiramideTestes_Unitários.JPG](https://dev.azure.com/totvstfs/f10c444a-8f28-4d0d-945d-28f63a8a5c43/_apis/wiki/wikis/9dedf917-c111-4b99-be8a-b7077f16692a/pages/488/comments/attachments/5414655f-05a0-438b-a917-9b968bbc6ef6) 

Testes Integrados.

O que são?
São validações entre as unidades para garantir o comportamento das integrações, tanto no que se refere ao comportamento esperado quanto a tolerância a falhas nas integrações 

Por que usar?
Para garantir que as integrações entre os sistemas estão ocorrendo como o esperado e que os contratos estão sendo respeitados. Caso haja uma alteração, esses testes devem indicar quais integrações serão afetadas.

Quando usar?
Temos que testar as conexões entre as unidades, deve ser feito o mais próximo possível do código; elementos de integração reais devem ser mockados via ferramentas ou no caso de database por estratégia de in-memory database.

![Fluxo.01_PiramideTestes_Integrados.JPG](https://dev.azure.com/totvstfs/f10c444a-8f28-4d0d-945d-28f63a8a5c43/_apis/wiki/wikis/9dedf917-c111-4b99-be8a-b7077f16692a/pages/488/comments/attachments/ec331f70-d47c-4586-b95e-187a15582a7a) 

Testes de Componentes.

O que são?
São testes no estilo “caixa preta” onde o componente é testado em seu estado completo e executando em um ambiente controlado, onde é possível determinar as condições de uso.

Por que usar?
Para garantir que “determinada entrada, gera determinada saída”. Com isso, é possível facilmente variar recursos que são expostos e também recursos internos. É responsável por garantir a integridade de funcionalidades após novas features, por exemplo.

Quando usar?
Os testes de componente devem ser realizados com o componente em seu estado completo e "rodando" em um ambiente controlado. Muitos cenários envolvem chamadas externas e persistência em elementos de dados, nestes casos deve ser feito uso de mock e com dados vazios.

![Fluxo.01_PiramideTestes_Componentes.JPG](https://dev.azure.com/totvstfs/f10c444a-8f28-4d0d-945d-28f63a8a5c43/_apis/wiki/wikis/9dedf917-c111-4b99-be8a-b7077f16692a/pages/488/comments/attachments/b1d87b99-cb8d-4c34-9c8f-e29f49ee1072) 

Testes de End-to-end (fim a fim).

O que são?
São testes no estilo “caixa preta” onde o sistema é executado “fim a fim”.

Por que usar?
Para confirmar que, em ambiente de homologação, o sistema tem todas as conexões e integrações (que em outros testes foram mockados) funcionando corretamente. A automação também pode ser usada nessa fase de testes.

Quando usar?
Quando a feature a ser disponibilizada estiver “concluída” e há chances reais do sistema ir para produção. Devido a complexidade de se criar um ambiente conectado com massa de dados para testes, os casos de teste incluídos no e2e precisam ser cuidadosamente avaliados para garantir que a gestão da massa de dados seja possível.

![Fluxo.01_PiramideTestes_e2e.JPG](https://dev.azure.com/totvstfs/f10c444a-8f28-4d0d-945d-28f63a8a5c43/_apis/wiki/wikis/9dedf917-c111-4b99-be8a-b7077f16692a/pages/488/comments/attachments/99eb8c07-92b1-450b-801d-c539e81ef3c0) 

Testes exploratórios.

O que são?
São validações de negócio ou de características que não puderam ser testadas anteriormente. Deve-se ter atenção: Nesta fase não se deve executar testes de requisitos (funcionais). Normalmente feita por pessoas, não scripts.

Por que usar?
Para garantir a fluidez da aplicação de forma informa e que visa testar os limites da aplicação.

Quando usar?
Quando a feature a ser disponibilizada estiver “concluída” e houveram características que não foram escritas em outras fases dos testes. Mesmo havendo a automação, o teste exploratório é necessário para a diversidade de fluxos.



![Fluxo.01_PiramideTestes_Exploratórios.JPG](https://dev.azure.com/totvstfs/f10c444a-8f28-4d0d-945d-28f63a8a5c43/_apis/wiki/wikis/9dedf917-c111-4b99-be8a-b7077f16692a/pages/488/comments/attachments/8de09212-ba49-4af6-b929-2283734a525c) 



